{
    "cells": [
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "# _MODEL_\n",
       "\n",
       "This notebook describes the _MODEL_ model for identifying C4 zinc binding sites. First the training and test data will be loaded."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "import numpy as np\n",
       "data_train = np.load(\"../npy/_CATEGORY_/C4_train.npy\")\n",
       "data_test = np.load(\"../npy/_CATEGORY_/C4_test.npy\")\n",
       "X_train, y_train = data_train[:, :-1], data_train[:, -1].astype(\"int\")\n",
       "X_test, y_test = data_test[:, :-1], data_test[:, -1].astype(\"int\")\n",
       "train_pos, test_pos = np.count_nonzero(y_train == 1), np.count_nonzero(y_test == 1)\n",
       "train_neg, test_neg = np.count_nonzero(y_train == -1), np.count_nonzero(y_test == -1)\n",
       "\n",
       "print(f\"Training data has {len(y_train)} rows\")\n",
       "print(f\"{train_pos} are positive ({train_pos / len(y_train) * 100:.2f}%)\")\n",
       "print(f\"{train_neg} are negative ({train_neg / len(y_train) * 100:.2f}%)\")\n",
       "print()\n",
       "print(f\"Test data has {len(y_test)} rows\")\n",
       "print(f\"{test_pos} are positive ({test_pos / len(y_test) * 100:.2f}%)\")\n",
       "print(f\"{test_neg} are positive ({test_neg / len(y_test) * 100:.2f}%)\")\n"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "The model will now be loaded, and its basic metrics printed."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "import joblib\n",
       "model = joblib.load(\"../models/_CATEGORY_/_PATH_\")\n",
       "y_pred = model.predict(X_test)\n",
       "print(\"Recall:\", model.test_recall_)\n",
       "print(\"Precision:\", round(model.test_precision_, 3))"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "The recall and precision scores"
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
       "scrolled": true
      },
      "outputs": [],
      "source": [
       "from sklearn.metrics import confusion_matrix\n",
       "import matplotlib.pyplot as plt\n",
       "\n",
       "\n",
       "cm = confusion_matrix(y_test, y_pred)\n",
       "fig, ax = plt.subplots()\n",
       "im = ax.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n",
       "ax.figure.colorbar(im, ax=ax)\n",
       "\n",
       "\n",
       "labels = [\"Not binding site\", \"Binding site\"]\n",
       "ax.set(\n",
       "    xticks=[0, 1], yticks=[0, 1], xticklabels=labels,\n",
       "    yticklabels=labels, ylabel=\"Actual\", xlabel=\"Predicted\"\n",
       ")\n",
       "plt.setp(ax.get_xticklabels(), rotation=25, ha=\"right\", rotation_mode=\"anchor\")\n",
       "thresh = cm.max() / 2.\n",
       "ax.text(0, 0, cm[0, 0], ha=\"center\", color=\"white\" if cm[0, 0] > thresh else \"black\")\n",
       "ax.text(0, 1, cm[0, 1], ha=\"center\", color=\"white\" if cm[0, 1] > thresh else \"black\")\n",
       "ax.text(1, 0, cm[1, 0], ha=\"center\", color=\"white\" if cm[1, 0] > thresh else \"black\")\n",
       "ax.text(1, 1, cm[1, 1], ha=\"center\", color=\"white\" if cm[1, 1] > thresh else \"black\")\n",
       "fig.tight_layout()\n",
       "plt.show()"
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
     }
    ],
    "metadata": {
     "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.2"
     }
    },
    "nbformat": 4,
    "nbformat_minor": 2
   }
   